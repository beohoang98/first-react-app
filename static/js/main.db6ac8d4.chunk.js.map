{"version":3,"sources":["logo.svg","Component/Sidebar.jsx","Component/Page/About.jsx","Component/Page/Blog/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Sidebar","react_default","a","createElement","reactstrap_es","dark","color","className","expand","href","process","Component","AboutPage","title","content","map","cardinfo","style","width","val","class","React","BlogPage","App","Component_Sidebar","logo","minHeight","padding","Switch","Route","path","render","Blog","About","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db6ac8d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { Container, Navbar, Nav, NavbarBrand, NavItem, NavLink } from \"reactstrap\";\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <Navbar dark color=\"dark\" className=\"sticky-top\" expand=\"md\">\n                <Container>\n                    <NavbarBrand href={process.env.PUBLIC_URL + '/'}>\n                        <i className=\"fab fa-react text-info\"></i> React App\n                    </NavbarBrand>\n                    <Nav className=\"ml-auto\">\n                        <NavItem>\n                            <NavLink href={process.env.PUBLIC_URL + '/'}><i className=\"fas fa-home\"></i> HOME</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href={process.env.PUBLIC_URL + '/about'}><i className=\"fas fa-info-circle\"></i> ABOUT</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href={process.env.PUBLIC_URL + '/blog'}><i className=\"fas fa-pen\"></i> BLOG</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Container>\n            </Navbar>\n        );\n    }\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport { Card, CardBody, CardHeader, CardTitle, Table } from 'reactstrap';\n\nclass AboutPage extends React.Component {\n    render() {\n        const info = [\n            {\n                title: \"Basic info\",\n                content: [\n                    {\n                        title: \"Name\", content: \"Hoàng Dân An\"\n                    },\n                    {\n                        title: \"Birth\", content: \"30/03/1998\"\n                    }\n                ]\n            },\n            {\n                title: \"Skills\",\n                content: [\n                    {\n                        title: \"Familiar Code Lang\",\n                        content: \"C/C++, Javascript, PHP, HTML / CSS\"\n                    },\n                    {\n                        title: \"Framework / Tools\",\n                        content: \"NodeJS, Sass & Less, Git\"\n                    },\n                ]\n            },\n            {\n                title: \"English\",\n                content: [\n                    {\n                        title: \"Reading\", content: \"Good\"\n                    },\n                    {\n                        title: \"Listening & Speaking\", content: \"Bad\"\n                    }\n                ]\n            }\n        ]\n        return (<div className=\"d-flex flex-wrap align-items-start\">{info.map(cardinfo => {\n            return (\n                \n                <Card className=\"shadow-lg m-4\" style={{ width: \"300px\" }}>\n                    <CardHeader className=\"bg-dark text-light\">\n                        <CardTitle>{cardinfo.title}</CardTitle>\n                    </CardHeader>\n                    <CardBody>\n                        <Table>\n                            <tbody>\n                                {cardinfo.content.map(val => {\n                                    return (\n                                        <tr>\n                                            <td class=\"text-primary\">{val.title}</td>\n                                            <td>{val.content}</td>\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </Table>\n                    </CardBody>\n                </Card>\n                \n            );\n        })}</div>);\n    }\n}\n\nexport default AboutPage;\n","import React from 'react';\n\nclass BlogPage extends React.Component {\n    render() {\n        return (\n            <h1>BLOG</h1>\n        );\n    }\n}\n\nexport default BlogPage;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Sidebar from './Component/Sidebar';\nimport {AboutPage, BlogPage} from \"./Component/Page/index\";\nimport { Container } from \"reactstrap\";\n\nimport { Route, Switch} from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App site\">\n        <Sidebar logo={logo} />\n        <Container style={{\n          minHeight: \"100vh\",\n          padding: \"2em\"\n        }}>\n          <Switch>\n              <Route path={process.env.PUBLIC_URL + \"/blog\"} render={()=> { return <BlogPage/>}} />\n              <Route path={process.env.PUBLIC_URL + \"/about\"} render={() => { return <AboutPage/>}} />\n          </Switch>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport './sass/site.sass';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}